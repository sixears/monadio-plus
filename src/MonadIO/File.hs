{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE UnicodeSyntax     #-}
{-# LANGUAGE ViewPatterns      #-}

module MonadIO.File
  ( hClose
  , withFile, withFileT, System.IO.IOMode(..)

  , access, stat, writable

  , fileWritable, isWritableFile, isWritableDir

  , readFileBinary, readHandleBinary, writeFileBinary

  , getContentsUTF8, hGetContentsUTF8, readFileUTF8, readFUTF8, writeFileUTF8

  , getContentsUTF8Lenient, hGetContentsUTF8Lenient, readFileUTF8Lenient
  , readFUTF8Lenient

  )
where

-- base --------------------------------

import qualified  System.IO

import Control.Monad           ( join, return )
import Control.Monad.IO.Class  ( MonadIO, liftIO )
import Data.Bool               ( Bool( False, True ), bool )
import Data.Eq                 ( Eq )
import Data.Function           ( ($) )
import Data.Maybe              ( Maybe( Just, Nothing ), fromMaybe )
import Data.String             ( String )
import System.Exit             ( ExitCode )
import System.IO               ( FilePath, Handle, IO
                               , IOMode( ReadMode, WriteMode )
                               , hSetEncoding, stdin, utf8
                               )
import Text.Show               ( Show )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )

-- bytestring --------------------------

import qualified Data.ByteString  as  BS

import Data.ByteString  ( ByteString )

-- data-textual ------------------------

import Data.Textual  ( toString )

-- fpath -------------------------------

import FPath.AbsDir       ( absdir )
import FPath.AbsFile      ( absfile )
import FPath.AsFilePath   ( AsFilePath( filepath ) )
import FPath.AsFilePath'  ( exterminate )
import FPath.DirLike      ( IsDir )
import FPath.File         ( File )
import FPath.FileLike     ( IsFile )
import FPath.Parent       ( parent )

-- lens --------------------------------

import Control.Lens.Review  ( review )

-- monadio-error -----------------------

import MonadError           ( —• )
import MonadError.IO        ( asIOError, asIOErrorY )
import MonadError.IO.Error  ( AsIOError, IOError, squashInappropriateTypeT )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool     ( ùîπ )
import Data.MoreUnicode.Functor  ( (‚ä≥), (‚ä≥‚ä≥‚ä≥), (‚©∫) )
import Data.MoreUnicode.Lens     ( (‚ä£), (‚´•) )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Natural  ( ‚Ñï )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( (@=?), testCase )

-- tasty-plus --------------------------

import TastyPlus  ( assertRight, runTestsP, runTestsReplay, runTestTree )

-- text --------------------------------

import qualified  Data.Text.IO  as  TextIO

import Data.Text                 ( Text )
import Data.Text.Encoding        ( decodeUtf8With )
import Data.Text.Encoding.Error  ( lenientDecode )

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

-- unix --------------------------------

import qualified  System.Posix.Files  as  Files
import System.Posix.Files  ( FileStatus, fileExist, getFileStatus, isDirectory )

--------------------------------------------------------------------------------

data FExists = FExists | NoFExists
  deriving (Eq,Show)

{- | Does file exist.  Note that "does /etc/passwd/ exist?", where /etc/passwd
     exists but is a file, will return `NoFExists`; but "does /etc exist?" where
     /etc exists but is a directory will return `FExists`.  See also `fexists'`.
 -}
fexists ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, AsFilePath œÑ) ‚áí œÑ ‚Üí Œº FExists
-- fileExist throws an InappropriateType IOException if you ask about a file
-- in a non-existent directory.  I think that sucks, and should be a simple
-- False (NoFExists)
fexists f = fromMaybe NoFExists ‚©∫ squashInappropriateTypeT ‚àò asIOError $
              bool NoFExists FExists ‚ä≥ fileExist (f ‚´• filepath)

----------

fexistsTests ‚à∑ TestTree
fexistsTests =
  let testFExists expect input =
        testCase (toString input) $
          (—• @IOError (fexists input)) ‚â´ assertRight (expect @=?)
   in testGroup "fexists"
                [ testFExists FExists   [absdir|/etc/|]
                , testFExists NoFExists [absdir|/nonsuch/|]
                , testFExists NoFExists [absdir|/etc/nonsuch/|]
                , testFExists FExists   [absfile|/etc/passwd|]
                , testFExists NoFExists [absdir|/etc/passwd/|]
                , testFExists NoFExists [absfile|/etc/passwd/nonsuch|]
                , testFExists NoFExists [absdir|/etc/passwd/nonsuch/|]
                ]

--------------------

{- | Does file exist.  Note that "does /etc/passwd/ exist?", where /etc/passwd
     exists but is a file, will return `FExists`.  See also `fexists`.  This is
     more symmetric, since "does /etc exist?" where /etc exists but is a
     directory will return `FExists`; but at a cost of being arguably less
     accurate.
 -}
fexists' ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, AsFilePath œÑ)‚áí œÑ ‚Üí Œº FExists
-- fileExist throws an InappropriateType IOException if you ask about a file
-- in a directory that is in reality a file.  I think that sucks, and should be
-- a simple False (NoFExists)
fexists' f = fromMaybe NoFExists ‚©∫ squashInappropriateTypeT ‚àò asIOError $
               bool NoFExists FExists ‚ä≥ fileExist (exterminate $ f ‚´• filepath)

----------

fexists'Tests ‚à∑ TestTree
fexists'Tests =
  let testFExists' expect input =
        testCase (toString input) $
          (—• @IOError (fexists' input)) ‚â´ assertRight (expect @=?)
   in testGroup "fexists'"
                [ testFExists' FExists   [absdir|/etc/|]
                , testFExists' NoFExists [absdir|/nonsuch/|]
                , testFExists' NoFExists [absdir|/etc/nonsuch/|]
                , testFExists' FExists   [absfile|/etc/passwd|]
                , testFExists' FExists   [absdir|/etc/passwd/|]
                , testFExists' NoFExists [absfile|/etc/passwd/nonsuch|]
                , testFExists' NoFExists [absdir|/etc/passwd/nonsuch/|]
                ]

----------------------------------------

-- | file stat; returns Nothing if file does not exist
stat ‚à∑ ‚àÄ Œµ œÅ Œº . (MonadIO Œº, AsFilePath œÅ, AsIOError Œµ, MonadError Œµ Œº) ‚áí
       œÅ ‚Üí Œº (Maybe FileStatus)
stat f = do
  -- The fexists' introduces a race-condition - bah - but without it, the
  -- stat may fail with an `InappropriateType` IOException when trying to stat
  -- a file in a "directory" that is in reality a file.  I think that sucks, and
  -- want to try that like any other non-existent file.
  fexists' f ‚â´ \ case
    NoFExists ‚Üí return Nothing
    FExists   ‚Üí asIOErrorY ‚àò getFileStatus ‚àò exterminate $ (f ‚´• filepath)
    
----------

statTests ‚à∑ TestTree
statTests =
  let testStat expect input f =
        testCase (toString input) $
          f (—• @IOError (stat input)) ‚â´ assertRight (expect @=?)
   in testGroup "stat"
                [ testStat (Just True)  [absdir|/etc/|]        (isDirectory ‚ä≥‚ä≥‚ä≥)
                , testStat (Just False) [absfile|/etc/passwd|] (isDirectory ‚ä≥‚ä≥‚ä≥)
                , testStat (Just False) [absdir|/etc/passwd/|] (isDirectory ‚ä≥‚ä≥‚ä≥)
                , testStat Nothing      [absfile|/nonsuch|]    (isDirectory ‚ä≥‚ä≥‚ä≥)
                , testStat Nothing      [absfile|/etc/passwd/nonsuch|]
                                                               (isDirectory ‚ä≥‚ä≥‚ä≥)
                , testStat Nothing      [absdir|/nonsuch/|]    (isDirectory ‚ä≥‚ä≥‚ä≥)
                ]

----------------------------------------

withFile ‚à∑ (MonadIO Œº, IsFile œÄ, AsIOError Œµ, MonadError Œµ Œº) ‚áí
           œÄ ‚Üí IOMode ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withFile fn mode io = asIOError $ System.IO.withFile (fn ‚´• filepath) mode io

withFileT ‚à∑ (MonadIO Œº, IsFile œÄ, AsIOError Œµ, MonadError Œµ Œº) ‚áí
            œÄ ‚Üí IOMode ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withFileT fn mode io =
  join ‚àò asIOError $ System.IO.withFile (fn ‚´• filepath) mode (\ h ‚Üí —• (io h))

----------------------------------------

-- cribbed shamelessly from RIO.Prelude.IO

{- | Read a file in UTF8 encoding using OS-specific line-ending handling.
     Throw an exception on invalid character.
 -}
readFileUTF8 ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí File ‚Üí Œº Text
readFileUTF8 fn =
  withFile fn ReadMode $ \ h ‚Üí do
    hSetEncoding h utf8
    TextIO.hGetContents h

--------------------

{- | Read a file in UTF8 encoding using OS-specific line-ending handling.
     Replace any invalid input bytes with the Unicode replacement character
     U+FFFD.
-}
-- plagiarized from https://www.snoyman.com/blog/2016/12/beware-of-readfile
readFileUTF8Lenient ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí File ‚Üí Œº Text
readFileUTF8Lenient = decodeUtf8With lenientDecode ‚©∫ readFileBinary

----------------------------------------

{- | Read a filehandle of UTF8-encoded text. -}
hGetContentsUTF8 ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº) ‚áí
                   Handle ‚Üí Œº Text
hGetContentsUTF8 h = asIOError $ do
  hSetEncoding h utf8
  liftIO $ TextIO.hGetContents h

----------------------------------------

{- | Read a filehandle of UTF8-encoded text; be lenient as in
     `readFileUTF8Lenient`. -}
hGetContentsUTF8Lenient ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº) ‚áí
                          Handle ‚Üí Œº Text
hGetContentsUTF8Lenient = decodeUtf8With lenientDecode ‚©∫ readHandleBinary

----------------------------------------

{- | Read UTF8-encoded text from `stdin`. -}
getContentsUTF8  ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº) ‚áí
                   Œº Text
getContentsUTF8 = hGetContentsUTF8 stdin

----------------------------------------

{- | Read UTF8-encoded text from `stdin`; be lenient as in
     `readFileUTF8Lenient`. -}
getContentsUTF8Lenient  ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº) ‚áí
                          Œº Text
getContentsUTF8Lenient = hGetContentsUTF8Lenient stdin

----------------------------------------

{- | Read a file, as for `readFileUTF8`; if no file is provided, read `stdin`.
 -}
readFUTF8 ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí Maybe File ‚Üí Œº Text
readFUTF8 Nothing   = getContentsUTF8
readFUTF8 (Just fn) = readFileUTF8 fn

----------------------------------------

{- | Read a file, as for `readFileUTF8Lenient`; if no file is provided,
     read `stdin`. -}
readFUTF8Lenient ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí Maybe File ‚Üí Œº Text
readFUTF8Lenient Nothing   = getContentsUTF8Lenient
readFUTF8Lenient (Just fn) = readFileUTF8Lenient fn

----------------------------------------

-- | Same as 'BS.readFile', but generalized to 'MonadIO'
readFileBinary ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí File ‚Üí Œº ByteString
readFileBinary = asIOError ‚àò liftIO ‚àò BS.readFile ‚àò review filepath

----------------------------------------

-- | Same as 'BS.hGetContents', but generalized to 'MonadIO'
readHandleBinary ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí
                   Handle ‚Üí Œº ByteString
readHandleBinary = asIOError ‚àò liftIO ‚àò BS.hGetContents

----------------------------------------

-- XXX SHOULD TAKE OVERWRITE OPTION, AND FILE MODE

{- | Write a file in UTF8 encoding using OS-specific line-ending handling. -}
writeFileUTF8 ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí
                File ‚Üí Text ‚Üí Œº ()
writeFileUTF8 fn text =
  withFile fn WriteMode $ \h ‚Üí do
    hSetEncoding h utf8
    TextIO.hPutStr h text

----------------------------------------

-- XXX SHOULD TAKE OVERWRITE OPTION, AND FILE MODE

-- | Same as 'BS.writeFile', but generalized to 'MonadIO'
writeFileBinary ‚à∑ ‚àÄ Œµ Œº . (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí
                  File ‚Üí ByteString ‚Üí Œº ()
writeFileBinary fn = asIOError ‚àò BS.writeFile (fn ‚´• filepath)

----------------------------------------

hClose ‚à∑ ‚àÄ Œµ Œº . (AsIOError Œµ, MonadError Œµ Œº, MonadIO Œº) ‚áí Handle ‚Üí Œº ()
hClose = asIOError ‚àò System.IO.hClose

-- fileAccess ----------------------------------------------

data AccessMode = ACCESS_R | ACCESS_WX | ACCESS_RWX
                | ACCESS_W | ACCESS_RX
                | ACCESS_X | ACCESS_RW

access ‚à∑ ‚àÄ Œµ œÅ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, AsFilePath œÅ) ‚áí
         AccessMode ‚Üí œÅ ‚Üí Œº (Maybe ùîπ)
access mode ((‚´• filepath) ‚Üí fp) = asIOErrorY $ go mode fp
  where go ‚à∑ AccessMode ‚Üí FilePath ‚Üí IO ùîπ
        go ACCESS_R   p = Files.fileAccess (p ‚´• filepath) True  False False
        go ACCESS_W   p = Files.fileAccess (p ‚´• filepath) False True  False
        go ACCESS_X   p = Files.fileAccess (p ‚´• filepath) False False True
        go ACCESS_RW  p = Files.fileAccess (p ‚´• filepath) True  True  False
        go ACCESS_RX  p = Files.fileAccess (p ‚´• filepath) True  False True
        go ACCESS_WX  p = Files.fileAccess (p ‚´• filepath) False True  True
        go ACCESS_RWX p = Files.fileAccess (p ‚´• filepath) True  True  True

{- | Simple shortcut for file (or directory) is writable by this user; `Nothing`
     is returned if file does not exist. -}
writable ‚à∑ ‚àÄ Œµ œÅ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, AsFilePath œÅ) ‚áí
            œÅ ‚Üí Œº (Maybe ùîπ)
writable = access ACCESS_W

----------------------------------------

{- | Is `f` an extant writable file? -}
_isWritableFile ‚à∑ (MonadIO Œº, IsFile Œ±,AsFilePath Œ±,MonadError Œµ Œº,AsIOError Œµ)‚áí
                  Œ± ‚Üí Maybe FileStatus -> Œº (Maybe Text)

_isWritableFile f st =
  let rJust = return ‚àò Just
   in case st of
        Nothing  ‚Üí rJust $ [fmt|%T does not exist|] f
        Just stp ‚Üí if isDirectory stp
                   then rJust $ [fmt|%T is a directory|] f
                   else writable f ‚â´ \ case
                          Nothing    ‚Üí rJust $ [fmt|no such file %T|] f
                          Just True  ‚Üí return Nothing
                          Just False ‚Üí rJust $ [fmt|cannot write to %T|] f

----------------------------------------

{- | Is `f` an extant writable file? -}
isWritableFile ‚à∑ (MonadIO Œº, IsFile Œ±, AsFilePath Œ±,MonadError Œµ Œº,AsIOError Œµ)‚áí
                 Œ± -> Œº (Maybe Text)

isWritableFile f = stat f ‚â´ _isWritableFile f

----------------------------------------

{- | Is `d` an extant writable directory? -}
isWritableDir ‚à∑ ‚àÄ Œ± Œµ Œº .
                (MonadIO Œº, IsDir Œ±, AsFilePath Œ±, MonadError Œµ Œº, AsIOError Œµ)‚áí
                Œ± -> Œº (Maybe Text)

isWritableDir d =
  let rJust = return ‚àò Just
   in stat d ‚â´ \ case
        Nothing  ‚Üí rJust $ [fmt|%T does not exist|] d
        Just stp ‚Üí if isDirectory stp
                   then writable d ‚â´ \ case
                          Nothing    ‚Üí rJust $ [fmt|no such directory %T|] d
                          Just True  ‚Üí return Nothing
                          Just False ‚Üí rJust $ [fmt|cannot write to %T|] d
                   else -- remove trailing '/', since the point is that d is
                        -- not a directory
                        rJust $ [fmt|%s is not a directory|]
                                (exterminate (d ‚´• filepath))

----------

isWritableDirTests ‚à∑ TestTree
isWritableDirTests =
  let testE f e = testCase (toString f) $
                    —• (isWritableDir @_ @IOError f) ‚â´ assertRight (Just e @=?)
      testN f   = testCase (toString f) $
                    —• (isWritableDir @_ @IOError f) ‚â´ assertRight (Nothing @=?)
   in testGroup "isWritableDir"
            [ testN [absdir|/tmp/|]
            , testE [absdir|/nonsuch/|]
                    "/nonsuch/ does not exist"
            , testE [absdir|/nonsuch/passwd/|]
                    "/nonsuch/passwd/ does not exist"
            , testE [absdir|/etc/|]
                    "cannot write to /etc/"
            , testE [absdir|/etc/passwd/|]
                    "/etc/passwd is not a directory"
            ]

----------------------------------------

{- | Test that the given path is a writable (by this user) *file*, or does not
     exist but is in a directory that is writable & executable by this user.
     In case of not writable, some error text is returned to say why.
 -}
fileWritable ‚à∑ ‚àÄ Œ± Œµ Œº .
               (MonadIO Œº, IsFile Œ±, AsFilePath Œ±, AsIOError Œµ, MonadError Œµ Œº)‚áí
               Œ± ‚Üí Œº (Maybe Text)
fileWritable fn = do
  stat fn ‚â´ \ case
    Just st ‚Üí _isWritableFile fn (Just st)
    Nothing ‚Üí -- fn does not exist; does it have a writeable dir parent?
              isWritableDir (fn ‚ä£ parent) ‚â´ \ case
                   Nothing ‚Üí return Nothing
                   Just e  ‚Üí return ‚àò Just $ [fmt|%t (%T)|] e fn

----------

fileWritableTests ‚à∑ TestTree
fileWritableTests =
  let testE f e = testCase (toString f) $
                    —• (fileWritable @_ @IOError f) ‚â´ assertRight (Just e @=?)
      testE' f e = testCase (toString f) $
                     —• (fileWritable @_ @IOError f) ‚â´ assertRight (e @=?)

   in testGroup "fileWritable"
            [ testE [absfile|/etc/passwd|]
                    "cannot write to /etc/passwd"
            , testE [absfile|/nonsuch/passwd|]
                    "/nonsuch/ does not exist (/nonsuch/passwd)"
            , testE [absfile|/etc/nonsuch|]
                    "cannot write to /etc/ (/etc/nonsuch)"
            , testE [absfile|/etc/passwd/nonsuch|]
                    "/etc/passwd is not a directory (/etc/passwd/nonsuch)"
            , testE [absfile|/etc/pam.d|]
                    "/etc/pam.d is a directory"

            , testE' [absfile|/dev/null|] Nothing
            ]

----------------------------------------

tests ‚à∑ TestTree
tests = testGroup "MonadIO.File" [ fexistsTests, fexists'Tests, statTests
                                 , isWritableDirTests, fileWritableTests ]

--------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------

