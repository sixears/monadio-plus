{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE UnicodeSyntax     #-}
{-# LANGUAGE ViewPatterns      #-}

module MonadIO.Directory
  ( chdir, inDir, lsdir, mkdir, mkpath, nuke )
where

import Base1T

-- base --------------------------------

import System.IO           ( FilePath )
import System.Posix.Types  ( FileMode )

-- directory ---------------------------

import System.Directory  ( createDirectory, listDirectory, removePathForcibly
                         , setCurrentDirectory, withCurrentDirectory )

-- exceptions --------------------------

import Control.Monad.Catch  ( MonadCatch, onException )

-- fpath -------------------------------

import FPath.AppendableFPath   ( AppendableFPath, AppendableFPathF
                               , AppendableFPathD, (‚´ª) )
import FPath.AsFilePath        ( AsFilePath, filepath )
import FPath.Dir               ( DirAs( _Dir_ ) )
import FPath.DirType           ( DirType )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.Parent            ( HasParentMay, parents' )
import FPath.Parseable         ( parse )
import FPath.RelFile           ( RelFile )
import FPath.ToDir             ( ToDir )

-- fstat -------------------------------

import FStat  ( FStat )

-- monaderror-io -----------------------

import MonadError.IO        ( ”ù )
import MonadError.IO.Error  ( IOError )

-- safe --------------------------------

import Safe  ( headMay )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadIO.Base   ( chmod )
import MonadIO.FStat  ( FExists( FExists, NoFExists )
                      , fexists, lfexists, lstats, pathTypes )

--------------------------------------------------------------------------------

{- | Change working directory. -}
chdir ‚à∑ ‚àÄ Œµ Œ¥ Œº .
        (MonadIO Œº, DirAs Œ¥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
        Œ¥    -- ^ directory to change to
      ‚Üí Œº ()
chdir (review filepath ‚Üí d) = asIOError $ setCurrentDirectory d

----------------------------------------

{- | Perform IO with the dir *temporarily* changed to a given directory. -}
inDir ‚à∑ (MonadIO Œº, DirAs Œ¥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
        Œ¥              -- ^ directory to work in
      ‚Üí ExceptT Œµ IO Œ± -- ^ IO to perform in the given directory
      ‚Üí Œº Œ±
inDir (review $ filepath ‚àò _Dir_ ‚Üí d) io =
  join ‚àò asIOError $ withCurrentDirectory d (—• io)

----------------------------------------

{- | Forcibly remove a file or directory (including any descendents). -}
nuke ‚à∑ ‚àÄ Œµ œÅ Œº .
       (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack, AsFilePath œÅ) ‚áí
       œÅ    -- ^ file/dir to remove
     ‚Üí Œº ()
nuke (review filepath ‚Üí fp) = asIOError $ removePathForcibly fp

----------------------------------------

{- | Create a (single) directory.  Will error if the directory already exists
     (either as a directory or a file), or the parent directory does not exist
     or is not writable by the current user.
 -}
mkdir ‚à∑ ‚àÄ Œµ Œ¥ Œº .
        (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack, DirAs Œ¥) ‚áí
        Œ¥        -- ^ directory to create
      ‚Üí FileMode -- ^ permissions for the directory
      ‚Üí Œº ()
mkdir d p = do
  let _mkdir = asIOError ‚àò createDirectory ‚àò (review $ filepath ‚àò _Dir_)
  pre_exists ‚Üê lfexists d
  asIOError $ onException (”ù $ _mkdir d ‚™º chmod @IOError p d)
                          (”ù $ when (FExists ‚â° pre_exists) $ nuke @IOError d)

----------------------------------------

{- | Create all missing elements of a path.
     The complex type signature in practice roughly equates `Œ¥` to `Dir` or
     `AbsDir` or `RelDir`.
     Directories that are newly created are given the perms specified as `p`.
     Pre-existing directories are untouched.
     In case of error, newly-made directories are removed; pre-existing
     directories are left in place.
 -}
mkpath ‚à∑ ‚àÄ Œµ Œ¥ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                    MonadCatch Œº, DirAs Œ¥,
                    HasParentMay Œ¥, HasParentMay (DirType Œ¥),
                    DirType Œ¥ ~ DirType (DirType Œ¥), Œ¥ ~ DirType Œ¥) ‚áí
         Œ¥        -- ^ directory to create
       ‚Üí FileMode -- ^ permissions to apply to any *newly created* directories
       ‚Üí Œº ()
mkpath d p = do
  to_make ‚Üê filterM (fmap (‚â° NoFExists) ‚àò fexists) (parents' d)
  case headMay to_make of
    ùïπ    ‚Üí return () -- nothing to do, all exist
    ùïµ t  ‚Üí -- make the intervening dirs, carefully; in case of any error,
           -- try to nuke those we freshly made
           onException (forM_ to_make (\ a ‚Üí mkdir a p)) (nuke t)

----------------------------------------

_lstdr ‚à∑ ‚àÄ Œµ Œ¥ Œº .
         (MonadIO Œº, DirAs Œ¥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
         Œ¥ ‚Üí Œº [FilePath]
_lstdr d = asIOError $ listDirectory (d ‚´• filepath)

----------

{-| List a directory's files & subdirs, along with their stat results.
    The results are split into files & dirs, so that they get appropriate types
    (`AbsDir`/`AbsFile`, or `RelDir`/`RelFile`).
-}
-- can we mandate somewhere that Œ± ~ DirType (FileType Œ±), at the typelevel?
lsdir ‚à∑ ‚àÄ Œµ Œµ' œÅ Œº .
        (MonadIO Œº, AsFPathError Œµ, MonadError Œµ Œº, HasCallStack,
         AsFilePath (AppendableFPathD œÅ), ToDir œÅ, AsIOError Œµ',
         AppendableFPath œÅ, AppendableFPathF œÅ ~ RelFile) ‚áí
        AppendableFPathD œÅ ‚Üí Œº ([(œÅ, FStat)], [(DirType œÅ, FStat)], [(œÅ, Œµ')])
lsdir d = do
  fns ‚Üê liftIO (listDirectory (d ‚´• filepath))
  xs ‚Üê sequence $ (fmap (d ‚´ª) ‚àò parse @RelFile) ‚ä≥ fns
  (foldr pathTypes ([],[],[]) ‚©∫ lstats) xs

-- that's all, folks! ----------------------------------------------------------
