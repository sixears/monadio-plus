{-# LANGUAGE FlexibleContexts    #-}
{-# LANGUAGE InstanceSigs        #-}
{-# LANGUAGE LambdaCase          #-}
{-# LANGUAGE NoImplicitPrelude   #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE PatternSynonyms     #-}
{-# LANGUAGE QuasiQuotes         #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications    #-}
{-# LANGUAGE UnicodeSyntax       #-}
{-# LANGUAGE ViewPatterns        #-}

module MonadIO.Cwd
  ( getCwd, getCwdY, getCwd', getCwd'Y

  , tests
  )
where

import Base1T  hiding  ( last )

-- base --------------------------------

import Data.List  ( isSuffixOf, length, take )

-- exceptions --------------------------

import Control.Monad.Catch  ( bracket )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir, __parseAbsDirP__ )
import FPath.AbsFile           ( AbsFile )
import FPath.Error.FPathError  ( AsFPathError, FPathIOError )
import FPath.Parseable         ( parse )

-- temporary ---------------------------

import System.IO.Temp ( withSystemTempDirectory )

-- text --------------------------------

import Data.Text  ( last )

-- unix --------------------------------

import System.Posix.Directory  ( changeWorkingDirectory, getWorkingDirectory )
import System.Posix.Files      ( readSymbolicLink )
import System.Posix.Process    ( getProcessID )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadIO.FStat  ( isDir )

--------------------------------------------------------------------------------

addSlash ‚à∑ ùïã ‚Üí ùïã
addSlash ""             = ""
addSlash t@(last ‚Üí '/') = t
addSlash t              = t ‚äï "/"

----------------------------------------

{- | Find pwd using /proc/<PID>/cwd.  We do this because
     `System.Posix.Directory.getWorkingDirectory` and
     `System.Directory.getCurrentDirectory` throw errors are not caught even
     with `catch`/`catchIO`.
 -}
getCwd ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº) ‚áí
         Œº AbsDir
getCwd = asIOError getWorkingDirectory ‚â´ parse ‚àò addSlash ‚àò toText

----------------------------------------

{- | Find pwd using /proc/<PID>/cwd.  This version of `getCwd` will try to
     return the name of the dir we changed to, even if that dir has since been
     deleted.
 -}
getCwd' ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsFPathError Œµ, AsIOError Œµ, MonadError Œµ Œº)‚áí
          Œº AbsDir
getCwd' = do
  pid      ‚Üê liftIO getProcessID
  proc_cwd ‚Üê parse @AbsFile $ [fmtT|/proc/%d/cwd|] pid
  fpdir    ‚Üê liftIO ‚àò readSymbolicLink $ toString proc_cwd
  is_dir   ‚Üê isDir fpdir
  let fpdir' = if not is_dir ‚àß (" (deleted)" `isSuffixOf` fpdir)
               then take (length fpdir - 10) fpdir
               else fpdir
  parse @AbsDir ‚àò addSlash $ toText fpdir'

----------------------------------------

{- | Get the pwd; in case of error, return `Nothing`. -}
getCwdY ‚à∑ ‚àÄ Œº . MonadIO Œº ‚áí Œº (ùïÑ AbsDir)
getCwdY = either (const ùïπ) ùïµ ‚ä≥ (—• @FPathIOError $ getCwd)

----------------------------------------

{- | Get the pwd; in case of error, return `Nothing`; uses `getCwd'`. -}
getCwd'Y ‚à∑ ‚àÄ Œº . MonadIO Œº ‚áí Œº (ùïÑ AbsDir)
getCwd'Y = either (const ùïπ) ùïµ ‚ä≥ (—• @FPathIOError $ getCwd')

--------------------

getCwdTests ‚à∑ TestTree
getCwdTests =
  let getCwd_ ‚à∑ IO (ùîº FPathIOError AbsDir)
      getCwd_ = —• getCwd

      inTmp = inSystemTempDirectory "MonadIO.Cwd.getCwdTests"
   in testGroup "getCwd" [
        testCase "getCwd" $ inTmp $ \ d ‚Üí getCwd_ ‚â´ \ cwd ‚Üí ùïΩ d @=? cwd
      ]

--------------------------------------------------------------------------------
--                                   tests                                    --
--------------------------------------------------------------------------------

inSystemTempDirectory ‚à∑ String ‚Üí (AbsDir ‚Üí IO Œ±) ‚Üí IO Œ±
inSystemTempDirectory t io =
  withSystemTempDirectory t $ \ d ‚Üí
    bracket (getWorkingDirectory ‚â´  \ o ‚Üí changeWorkingDirectory d ‚™º return o)
            changeWorkingDirectory
            (\ _ ‚Üí io $ __parseAbsDirP__ d)

tests ‚à∑ TestTree
tests = testGroup "MonadIO.FPath" [ getCwdTests ]

----------------------------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
