{-# LANGUAGE DerivingStrategies         #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE UnicodeSyntax              #-}

{- | User lookup (from `/etc/passwd`, etc.) with MonadIO, FPath, etc. -}
module MonadIO.User
  ( UserName
  , UserPwEnt
  , getPwBy
  , getPwBy'
  , getUserName
  , getUserName'
  , getpwuid
  , getuid
  , homeDir
  , homeDirectory
  , homePath
  , pwUID
  , userDir
  , userName
  , userPwEntFromUserEntry
  ) where

import Base1T

-- fpath -------------------------------

import FPath.AbsDir           ( AbsDir, parseAbsDirP )
import FPath.AppendableFPath  ( AppendableFPath, AppendableFPathD,
                                AppendableFPathF, (‚´ª) )
import FPath.Error.FPathError ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter ( view )

-- monaderror-io -----------------------

import MonadError.IO.Error ( squashNoSuchThing, throwUserError )

-- unix --------------------------------

import System.Posix.User qualified as PosixUser

import System.Posix.Types           ( UserID )
import System.Posix.User            ( getRealUserID, getUserEntryForID )
import System.Posix.User.ByteString ( UserEntry )

------------------------------------------------------------

-- | a user name, as found in the pw table
newtype UserName = UserName ùïã
  deriving newtype (Printable, Show)

------------------------------------------------------------

{- | An entry in the pw table (e.g., `/etc/passwd`). -}
data UserPwEnt = UserPwEnt { _userName :: UserName
                           , _userDir  :: AbsDir
                           }
  deriving (Show)

{-| lens for homedir of `UserPwEnt` -}
userDir ‚à∑ Lens' UserPwEnt AbsDir
userDir = lens _userDir (\ upe ud ‚Üí upe { _userDir = ud })

{-| lens for username of `UserPwEnt` -}
userName ‚à∑ Lens' UserPwEnt UserName
userName = lens _userName (\ upe un ‚Üí upe { _userName = un })

{- | Convert a `UserEntry` to a `UserPwEnt`; throws error if the home dir is not
     a valid abs dir. -}
userPwEntFromUserEntry ‚à∑ ‚àÄ Œµ Œ∑ . (AsFPathError Œµ, MonadError Œµ Œ∑) ‚áí
                         UserEntry ‚Üí Œ∑ UserPwEnt
userPwEntFromUserEntry ue = do
  hD ‚Üê parseAbsDirP $ PosixUser.homeDirectory ue
  let uN = UserName (toText $ PosixUser.userName ue)
  return $ UserPwEnt { _userName = uN, _userDir  = hD }

----------------------------------------

-- | the pw entry, for the given user selector fn & value; error if not exists
getPwBy' ‚à∑ ‚àÄ Œµ Œ± Œº . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
           (Œ± ‚Üí IO UserEntry) ‚Üí Œ± ‚Üí Œº UserPwEnt
getPwBy' f a = join ‚àò asIOError $ userPwEntFromUserEntry ‚ä≥ f a

----------------------------------------

{- | The pw entry, if one exists, for the given user selector fn & value. -}
getPwBy ‚à∑ ‚àÄ Œµ Œ± Œº . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
          (Œ± ‚Üí IO UserEntry) ‚Üí Œ± ‚Üí Œº (ùïÑ UserPwEnt)
getPwBy f a = join $ squashNoSuchThing ‚ä≥ —• (getPwBy' f a)

{- | Like `getpwuid', but (IO)Error if we're missing an entry for the given
     UID. -}
pwUID ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
         UserID ‚Üí Œº UserPwEnt
pwUID = getPwBy' $ getUserEntryForID

----------------------------------------

{- | The home directory (per getpw*, i.e., /etc/passwd or equivalent) of the
     current Real user (that return by getuid).
     Returns nothing if the pw db has no entry for the current user.
     Errors if reading the pw db errors, or if the value provided is not a valid
     absolute directory.
 -}
homeDirectory ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ,AsFPathError Œµ,MonadError Œµ Œº) ‚áí
                Œº (ùïÑ AbsDir)
homeDirectory = (view userDir ‚ä≥‚ä≥) $ getuid ‚â´ getpwuid

----------------------------------------

{- | Like `homeDirectory`, but throws if the getuid entry isn't found. -}
homeDir ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
          Œº AbsDir
homeDir = fmap (view userDir) $ getuid ‚â´ pwUID

----------------------------------------

{- | Construct an absolute dir/file from a relative dir/file, prepended with
     the home dir. -}
homePath ‚à∑ ‚àÄ Œµ Œº Œ≤ . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
                      AppendableFPath Œ≤, AppendableFPathD Œ≤ ~ AbsDir) ‚áí
           AppendableFPathF Œ≤ ‚Üí Œº Œ≤
homePath p = homeDir ‚â´ return ‚àò (‚´ª p)

----------------------------------------

{- | Real user ID of the calling process. -}
getuid ‚à∑ MonadIO Œº ‚áí Œº UserID
getuid = liftIO getRealUserID

----------------------------------------

{- | The pw entry, if one exists, for the given user ID. -}
getpwuid ‚à∑ ‚àÄ Œµ Œº . (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
           UserID ‚Üí Œº (ùïÑ UserPwEnt)
getpwuid = getPwBy getUserEntryForID

----------------------------------------

{-| the current user name -}
getUserName ‚à∑ (MonadIO Œº, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº) ‚áí
              Œº (ùïÑ UserName)
getUserName = fmap _userName ‚ä≥ (getuid ‚â´ getpwuid)

----------------------------------------

{-| the current user name; throws an error if getpwuid can't find the uid -}
getUserName' ‚à∑ (MonadIO Œº,
                AsIOError Œµ, AsFPathError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
               Œº UserName
getUserName' = do
  uid ‚Üê getuid
  getpwuid uid ‚â´ \ case
    ùïµ user_pw_ent ‚Üí return (user_pw_ent ‚ä£ userName)
    ùïπ             ‚Üí throwUserError $ [fmtT|no passwd entry found for %d|] uid

-- that's all, folks! ----------------------------------------------------------
