{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE InstanceSigs      #-}
{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE TupleSections     #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE UnicodeSyntax     #-}
{-# LANGUAGE ViewPatterns      #-}

module MonadIO.OpenFile
  ( openFile', openFileBinary', openFileUTF8'
  , openFile, openFileBinary, openFileUTF8

  , openFileReadBinary', openFileReadWriteBinary', openFileReadWriteExBinary'
  , openFileReadWriteNoTruncBinary'
  , openFileWriteExBinary', openFileWriteBinary', openFileWriteNoTruncBinary'
  , openFileAppendBinary'

  , openFileReadUTF8', openFileReadWriteUTF8', openFileReadWriteExUTF8'
  , openFileReadWriteNoTruncUTF8'
  , openFileWriteExUTF8', openFileWriteUTF8', openFileWriteNoTruncUTF8'
  , openFileAppendUTF8'

  , openFileReadBinary, openFileReadWriteBinary, openFileReadWriteExBinary
  , openFileReadWriteNoTruncBinary
  , openFileWriteExBinary, openFileWriteBinary, openFileWriteNoTruncBinary
  , openFileAppendBinary

  , openFileReadUTF8, openFileReadWriteUTF8, openFileReadWriteExUTF8
  , openFileReadWriteNoTruncUTF8
  , openFileWriteExUTF8, openFileWriteUTF8, openFileWriteNoTruncUTF8
  , openFileAppendUTF8

  , readFileBinary, writeFileBinary, writeExFileBinary, writeNoTruncFileBinary
  , appendFileBinary

  , readFileUTF8, writeFileUTF8, writeNoTruncFileUTF8, writeExFileUTF8
  , appendFileUTF8

  , readFileUTF8Lenient

  , withFile, withFileME
  , withFileBinary, withFileBinaryME, withFileUTF8, withFileUTF8ME

  , withReadFileBinary, withReadWriteFileBinary, withReadWriteExFileBinary
  , withReadWriteNoTruncFileBinary
  , withWriteFileBinary, withWriteExFileBinary, withWriteNoTruncFileBinary
  , withAppendFileBinary

  , withReadFileBinaryME, withReadWriteFileBinaryME
  , withReadWriteExFileBinaryME, withReadWriteNoTruncFileBinaryME
  , withWriteFileBinaryME, withWriteExFileBinaryME
  , withWriteNoTruncFileBinaryME, withAppendFileBinaryME

  , withReadFileUTF8, withReadWriteFileUTF8, withReadWriteExFileUTF8
  , withReadWriteNoTruncFileUTF8
  , withWriteFileUTF8, withWriteExFileUTF8, withWriteNoTruncFileUTF8
  , withAppendFileUTF8

  , withReadFileUTF8ME, withReadWriteFileUTF8ME
  , withReadWriteExFileUTF8ME, withReadWriteNoTruncFileUTF8ME
  , withWriteFileUTF8ME, withWriteExFileUTF8ME
  , withWriteNoTruncFileUTF8ME, withAppendFileUTF8ME

  , tests
  )
where

-- base --------------------------------

import qualified  System.IO

import Control.Monad           ( join, return )
import Control.Monad.IO.Class  ( MonadIO, liftIO )
import Data.Bool               ( Bool( False, True ) )
import Data.Either             ( Either )
import Data.Function           ( ($), flip )
import Data.Maybe              ( Maybe( Just, Nothing ) )
import Data.String             ( String )
import GHC.Stack               ( HasCallStack )
import System.Exit             ( ExitCode )
import System.IO               ( Handle, IO
                               , IOMode( AppendMode, ReadMode, ReadWriteMode
                                       , WriteMode )
                               , NewlineMode, TextEncoding
                               , char8, hSetEncoding, hSetNewlineMode
                               , nativeNewlineMode, noNewlineTranslation, utf8
                               )
import System.Posix.Types      ( FileMode )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )

-- bytestring --------------------------

import qualified Data.ByteString  as  BS

import Data.ByteString  ( ByteString )

-- exceptions --------------------------

import Control.Monad.Catch  ( bracket )

-- fpath -------------------------------

import FPath.AbsFile     ( absfile )
import FPath.AsFilePath  ( AsFilePath( filepath ) )
import FPath.File        ( FileAs( _File_ ) )

-- lens --------------------------------

import Control.Lens.Review  ( review )

-- monadio-error -----------------------

import MonadError           ( —• )
import MonadError.IO        ( asIOError )
import MonadError.IO.Error  ( AsIOError, IOError )

-- more-unicode ------------------------

import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Lens     ( (‚´•) )
import Data.MoreUnicode.Maybe    ( ùïÑ )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Natural  ( ‚Ñï )
import Data.MoreUnicode.Text     ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

-- tasty -------------------------------

import Test.Tasty  ( TestTree, testGroup )

-- tasty-hunit -------------------------

import Test.Tasty.HUnit  ( Assertion, (@=?), testCase )

-- tasty-plus --------------------------

import TastyPlus  ( assertIsLeft, assertRight, runTestsP, runTestsReplay
                  , runTestTree )

-- text --------------------------------

import qualified  Data.Text.IO  as  TextIO

import Data.Text                 ( drop, length )
import Data.Text.Encoding        ( decodeUtf8With )
import Data.Text.Encoding.Error  ( lenientDecode )

-- unix --------------------------------

import System.Posix.IO     ( OpenFileFlags( OpenFileFlags, append, exclusive
                                          , noctty, nonBlock, trunc ),
                             OpenMode( ReadOnly, ReadWrite, WriteOnly )
                           , fdToHandle, noctty, nonBlock, openFd
                           )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadIO.Base      ( chmod, unlink )

--------------------------------------------------------------------------------

{- | OpenFileFlags suitable for reading. -}
readFlags ‚à∑ OpenFileFlags
readFlags = OpenFileFlags { append = False, exclusive = False, noctty = False,
                             nonBlock = False, trunc = False }
--------------------

{- | OpenFileFlags suitable for read-write opens /with pre-truncation/
     (analogous to writeFlags) . -}
readWriteFlags ‚à∑ OpenFileFlags
readWriteFlags = OpenFileFlags { append = False, exclusive = False
                               , noctty = False, nonBlock = False
                               , trunc = True
                               }

--------------------

{- | OpenFileFlags suitable for read-write opens /with pre-truncation/
     (analogous to writeFlags) . -}
readWriteNoTruncFlags ‚à∑ OpenFileFlags
readWriteNoTruncFlags = OpenFileFlags { append = False, exclusive = False
                                      , noctty = False, nonBlock = False
                                      , trunc = False
                                      }

--------------------

{- | OpenFileFlags suitable for read-write opens, with exclusive (file must
     not pre-exist (man file(2):O_EXCL). -}
readWriteExFlags ‚à∑ OpenFileFlags
readWriteExFlags = OpenFileFlags { append = False, exclusive = True
                                 , noctty = False, nonBlock = False
                                 , trunc = False
                                 }

--------------------

{- | OpenFileFlags suitable for writing /with pre-truncation/; this is just the
      `trunc` (man file(2):O_TRUNC) flag. -}
writeFlags ‚à∑ OpenFileFlags
writeFlags = OpenFileFlags { append = False, exclusive = False, noctty = False
                           , nonBlock = False, trunc = True }

--------------------

{- | OpenFileFlags suitable for writing /without pre-truncating/. -}
writeNoTruncFlags ‚à∑ OpenFileFlags
writeNoTruncFlags = OpenFileFlags { append = False, exclusive = False
                                  , noctty = False, nonBlock = False
                                  , trunc = False }

--------------------

{- | OpenFileFlags suitable for writing a new file; this is just the `exclusive`
     (man file(2):O_EXCL) flag.
     This seems redundant in practice, but I've added it here as a belt'n'braces
     thing.
-}
writeExFlags ‚à∑ OpenFileFlags
writeExFlags = OpenFileFlags { append = False, exclusive = True, noctty = False,
                               nonBlock = False, trunc = False }

--------------------

{- | OpenFileFlags suitable for appending; this is just the `append`
     (man file(2):O_APPEND) flag. -}
appendFlags ‚à∑ OpenFileFlags
appendFlags = OpenFileFlags { append = True, exclusive = False, noctty = False,
                              nonBlock = False, trunc = False }

----------------------------------------

openFile' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí
            TextEncoding ‚Üí NewlineMode ‚Üí IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode
          ‚Üí Œ≥ ‚Üí Œº Handle
openFile' enc nlm mode flags perms (review _File_ ‚Üí fn) = liftIO $ do
  let openMode ReadMode      = ReadOnly
      openMode WriteMode     = WriteOnly
      openMode ReadWriteMode = ReadWrite
      openMode AppendMode    = WriteOnly
      flags'   = case mode of
                   AppendMode ‚Üí flags { append = True }
                   _          ‚Üí flags
  h ‚Üê openFd (fn ‚´• filepath) (openMode mode) perms flags' ‚â´ fdToHandle
  hSetEncoding h enc
  hSetNewlineMode h nlm
  return h

--------------------

openFileUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí
                IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileUTF8' = openFile' utf8 nativeNewlineMode

--------------------

openFileBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí
                  IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileBinary' = openFile' char8 noNewlineTranslation

----------------------------------------

openFile ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
           TextEncoding ‚Üí NewlineMode ‚Üí IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥
         ‚Üí Œº Handle
openFile enc nlm mode flags perms fn =
   asIOError $ openFile' enc nlm mode flags perms fn

--------------------

openFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack)‚áí
                  IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileUTF8 mode flags perms = asIOError ‚àò openFileUTF8' mode flags perms

--------------------

openFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                  HasCallStack) ‚áí
                  IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileBinary mode flags perms =
  asIOError ‚àò openFileBinary' mode flags perms

----------------------------------------

openFileReadBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí Œ≥ ‚Üí Œº Handle
openFileReadBinary' = liftIO ‚àò openFileBinary' ReadMode readFlags Nothing

openFileReadWriteBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteBinary' perms =
  openFileBinary' ReadWriteMode readWriteFlags perms

openFileReadWriteNoTruncBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí
                                  ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteNoTruncBinary' perms =
  openFileBinary' ReadWriteMode readWriteNoTruncFlags perms

openFileReadWriteExBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteExBinary' perms =
  openFileBinary' ReadWriteMode readWriteExFlags perms

openFileWriteNoTruncBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteNoTruncBinary' perms =
  openFileBinary' WriteMode writeNoTruncFlags perms

openFileWriteExBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteExBinary' perms =
  openFileBinary' WriteMode writeExFlags (Just perms)

openFileWriteBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteBinary' perms =
  openFileBinary' WriteMode writeFlags perms

openFileAppendBinary' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileAppendBinary' perms = openFileBinary' AppendMode appendFlags perms

----------------------------------------

openFileReadUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí Œ≥ ‚Üí Œº Handle
openFileReadUTF8' = liftIO ‚àò openFileUTF8' ReadMode readFlags Nothing

openFileReadWriteUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteUTF8' perms = openFileUTF8' ReadWriteMode readWriteFlags perms

openFileReadWriteNoTruncUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí
                                ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteNoTruncUTF8' perms =
  openFileUTF8' ReadWriteMode readWriteNoTruncFlags perms

openFileReadWriteExUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteExUTF8' perms =
  openFileUTF8' ReadWriteMode readWriteExFlags perms

openFileWriteUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteUTF8' perms = openFileUTF8' WriteMode writeFlags perms

openFileWriteNoTruncUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteNoTruncUTF8' perms =
  openFileUTF8' WriteMode writeNoTruncFlags perms

openFileWriteExUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteExUTF8' perms = openFileUTF8' WriteMode writeExFlags (Just perms)

openFileAppendUTF8' ‚à∑ (MonadIO Œº, FileAs Œ≥) ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileAppendUTF8' perms = openFileUTF8' AppendMode appendFlags perms

----------------------------------------

openFileReadBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                      FileAs Œ≥) ‚áí
                       Œ≥ ‚Üí Œº Handle
openFileReadBinary = asIOError ‚àò openFileReadBinary'

openFileReadWriteBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                           FileAs Œ≥) ‚áí
                          ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteBinary perms = asIOError ‚àò openFileReadWriteBinary' perms

openFileReadWriteNoTruncBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                                  HasCallStack, FileAs Œ≥) ‚áí
                                 ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteNoTruncBinary perms =
  asIOError ‚àò openFileReadWriteNoTruncBinary' perms

openFileReadWriteExBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                             HasCallStack, FileAs Œ≥) ‚áí
                          ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteExBinary perms = asIOError ‚àò openFileReadWriteExBinary' perms

openFileWriteBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                       FileAs Œ≥) ‚áí
                      ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteBinary perms = asIOError ‚àò openFileWriteBinary' perms

openFileWriteNoTruncBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                              HasCallStack, FileAs Œ≥) ‚áí
                      ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteNoTruncBinary perms = asIOError ‚àò openFileWriteNoTruncBinary' perms

openFileWriteExBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                         FileAs Œ≥) ‚áí
                        FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteExBinary perms = asIOError ‚àò openFileWriteExBinary' perms

openFileAppendBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                        FileAs Œ≥) ‚áí
                       ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileAppendBinary perms = asIOError ‚àò openFileAppendBinary' perms

----------------------------------------

openFileReadUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                    FileAs Œ≥) ‚áí
                   Œ≥ ‚Üí Œº Handle
openFileReadUTF8 = asIOError ‚àò openFileReadUTF8'

openFileReadWriteUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                         FileAs Œ≥) ‚áí
                        ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteUTF8 perms = asIOError ‚àò openFileReadWriteUTF8' perms

openFileReadWriteNoTruncUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                                HasCallStack, FileAs Œ≥) ‚áí
                               ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteNoTruncUTF8 perms =
  asIOError ‚àò openFileReadWriteNoTruncUTF8' perms

openFileReadWriteExUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                           FileAs Œ≥) ‚áí
                          ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileReadWriteExUTF8 perms = asIOError ‚àò openFileReadWriteExUTF8' perms

openFileWriteUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                     FileAs Œ≥) ‚áí
                    ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteUTF8 perms = asIOError ‚àò openFileWriteUTF8' perms

openFileWriteNoTruncUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                            HasCallStack, FileAs Œ≥) ‚áí
                           ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteNoTruncUTF8 perms = asIOError ‚àò openFileWriteNoTruncUTF8' perms

openFileWriteExUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                       FileAs Œ≥) ‚áí
                      FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileWriteExUTF8 perms = asIOError ‚àò openFileWriteExUTF8' perms

openFileAppendUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                      FileAs Œ≥) ‚áí
                     ùïÑ FileMode ‚Üí Œ≥ ‚Üí Œº Handle
openFileAppendUTF8 perms = asIOError ‚àò openFileAppendUTF8' perms

----------------------------------------

withFile ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
           TextEncoding ‚Üí NewlineMode ‚Üí IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥
         ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withFile enc nlm mode flags perms (review _File_ ‚Üí fn) io = asIOError $
   bracket (openFile' enc nlm mode flags perms fn) System.IO.hClose io

--------------------

withFileME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
             TextEncoding ‚Üí NewlineMode ‚Üí IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode
           ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withFileME enc nlm mode flags perms fn io =
  join $ withFile enc nlm mode flags perms fn (—• ‚àò io)

----------------------------------------

withFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                  HasCallStack) ‚áí
                 IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withFileBinary = withFile char8 noNewlineTranslation

--------------------

withFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                    HasCallStack) ‚áí
                   IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥
                 ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withFileBinaryME = withFileME char8 noNewlineTranslation

--------------------

withFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº, HasCallStack)‚áí
               IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withFileUTF8 = withFile utf8 nativeNewlineMode

--------------------

withFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                  HasCallStack) ‚áí
                 IOMode ‚Üí OpenFileFlags ‚Üí ùïÑ FileMode ‚Üí Œ≥
               ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withFileUTF8ME = withFileME utf8 nativeNewlineMode

----------------------------------------

withReadFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                      HasCallStack) ‚áí
                   Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadFileBinary = withFileBinary ReadMode readFlags Nothing

withReadWriteFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                           HasCallStack) ‚áí
                          ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteFileBinary perms =
  withFileBinary ReadWriteMode readWriteFlags perms

withReadWriteNoTruncFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                                  MonadError Œµ Œº, HasCallStack) ‚áí
                                 ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteNoTruncFileBinary perms =
  withFileBinary ReadWriteMode readWriteNoTruncFlags perms

withReadWriteExFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                             HasCallStack) ‚áí
                            FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteExFileBinary perms =
  withFileBinary ReadWriteMode readWriteExFlags (Just perms)

withWriteFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                       HasCallStack) ‚áí
                      ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteFileBinary perms = withFileBinary WriteMode writeFlags perms

withWriteNoTruncFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                              MonadError Œµ Œº, HasCallStack) ‚áí
                             ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteNoTruncFileBinary perms =
  withFileBinary WriteMode writeNoTruncFlags perms

withWriteExFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                         HasCallStack) ‚áí
                        FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteExFileBinary perms = withFileBinary WriteMode writeExFlags (Just perms)

withAppendFileBinary ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                        HasCallStack) ‚áí
                       ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withAppendFileBinary perms = withFileBinary AppendMode appendFlags perms

----------------------------------------

withReadFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                        HasCallStack) ‚áí
                       Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadFileBinaryME = withFileBinaryME ReadMode readFlags Nothing

withReadWriteFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                             HasCallStack) ‚áí
                            ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadWriteFileBinaryME perms =
  withFileBinaryME ReadWriteMode readWriteFlags perms

withReadWriteNoTruncFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                                    MonadError Œµ Œº, HasCallStack) ‚áí
                                   ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ)
                                 ‚Üí Œº œâ
withReadWriteNoTruncFileBinaryME perms =
  withFileBinaryME ReadWriteMode readWriteNoTruncFlags perms

withReadWriteExFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                               MonadError Œµ Œº, HasCallStack) ‚áí
                              FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadWriteExFileBinaryME perms =
  withFileBinaryME ReadWriteMode readWriteExFlags (Just perms)

withWriteFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                         HasCallStack) ‚áí
                        ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteFileBinaryME perms = withFileBinaryME WriteMode writeFlags perms

withWriteNoTruncFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                                MonadError Œµ Œº, HasCallStack) ‚áí
                               ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteNoTruncFileBinaryME perms =
  withFileBinaryME WriteMode writeNoTruncFlags perms

withWriteExFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                           HasCallStack) ‚áí
                          FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteExFileBinaryME perms =
  withFileBinaryME WriteMode writeExFlags (Just perms)

withAppendFileBinaryME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                          HasCallStack) ‚áí
                       ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withAppendFileBinaryME perms = withFileBinaryME AppendMode appendFlags perms

----------------------------------------

withReadFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                    HasCallStack) ‚áí
                   Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadFileUTF8 = withFileUTF8 ReadMode readFlags Nothing

withReadWriteFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                         HasCallStack) ‚áí
                        ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteFileUTF8 perms = withFileUTF8 ReadWriteMode readWriteFlags perms

withReadWriteNoTruncFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                                MonadError Œµ Œº, HasCallStack) ‚áí
                               ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteNoTruncFileUTF8 perms =
  withFileUTF8 ReadWriteMode readWriteNoTruncFlags perms

withReadWriteExFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                           HasCallStack) ‚áí
                          FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withReadWriteExFileUTF8 perms =
  withFileUTF8 ReadWriteMode readWriteExFlags (Just perms)

withWriteFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                     HasCallStack) ‚áí
                    ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteFileUTF8 perms = withFileUTF8 WriteMode writeFlags perms

withWriteNoTruncFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                            MonadError Œµ Œº, HasCallStack) ‚áí
                           ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteNoTruncFileUTF8 perms = withFileUTF8 WriteMode writeNoTruncFlags perms

withWriteExFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                       HasCallStack) ‚áí
                      FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withWriteExFileUTF8 perms = withFileUTF8 WriteMode writeExFlags (Just perms)

withAppendFileUTF8 ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                      HasCallStack) ‚áí
                     ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withAppendFileUTF8 perms = withFileUTF8 AppendMode appendFlags perms

----------------------------------------

withReadFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                      HasCallStack) ‚áí
                     Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadFileUTF8ME = withFileUTF8ME ReadMode readFlags Nothing

withReadWriteFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                           HasCallStack) ‚áí
                          ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadWriteFileUTF8ME perms =
  withFileUTF8ME ReadWriteMode readWriteFlags perms

withReadWriteNoTruncFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                                  MonadError Œµ Œº, HasCallStack) ‚áí
                                 ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ)
                               ‚Üí Œº œâ
withReadWriteNoTruncFileUTF8ME perms =
  withFileUTF8ME ReadWriteMode readWriteNoTruncFlags perms

withReadWriteExFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                             HasCallStack) ‚áí
                            FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withReadWriteExFileUTF8ME perms =
  withFileUTF8ME ReadWriteMode readWriteExFlags (Just perms)

withWriteFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                       HasCallStack) ‚áí
                    ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteFileUTF8ME perms = withFileUTF8ME WriteMode writeFlags perms

withWriteNoTruncFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ,
                              MonadError Œµ Œº, HasCallStack) ‚áí
                             ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteNoTruncFileUTF8ME perms =
  withFileUTF8ME WriteMode writeNoTruncFlags perms

withWriteExFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                         HasCallStack) ‚áí
                        FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withWriteExFileUTF8ME perms = withFileUTF8ME WriteMode writeExFlags (Just perms)

withAppendFileUTF8ME ‚à∑ (MonadIO Œº, FileAs Œ≥, AsIOError Œµ, MonadError Œµ Œº,
                        HasCallStack) ‚áí
                       ùïÑ FileMode ‚Üí Œ≥ ‚Üí (Handle ‚Üí ExceptT Œµ IO œâ) ‚Üí Œº œâ
withAppendFileUTF8ME perms = withFileUTF8ME AppendMode appendFlags perms

----------------------------------------

{- | Read a file as bytes. -}
readFileBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                  FileAs Œ≥) ‚áí
                 Œ≥ ‚Üí Œº ByteString
readFileBinary fn = withReadFileBinary fn BS.hGetContents

writeFileBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                   FileAs Œ≥) ‚áí
                  ùïÑ FileMode ‚Üí Œ≥ ‚Üí ByteString ‚Üí Œº ()
writeFileBinary perms fn t =
  withWriteFileBinary perms fn (flip BS.hPutStr t)

writeNoTruncFileBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                          FileAs Œ≥) ‚áí
                         ùïÑ FileMode ‚Üí Œ≥ ‚Üí ByteString ‚Üí Œº ()
writeNoTruncFileBinary perms fn t =
  withWriteNoTruncFileBinary perms fn (flip BS.hPutStr t)

writeExFileBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                     FileAs Œ≥) ‚áí
                  FileMode ‚Üí Œ≥ ‚Üí ByteString ‚Üí Œº ()
writeExFileBinary perms fn t =
  withWriteExFileBinary perms fn (flip BS.hPutStr t)

appendFileBinary ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                    FileAs Œ≥) ‚áí
                ùïÑ FileMode ‚Üí Œ≥ ‚Üí ByteString ‚Üí Œº ()
appendFileBinary perms fn t =
  withFileBinary AppendMode appendFlags perms fn (flip BS.hPutStr t)

{- | Read a file in UTF8 encoding using OS-specific line-ending handling.
     Throw an exception on invalid character.
 -}
readFileUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                FileAs Œ≥) ‚áí
               Œ≥ ‚Üí Œº ùïã
readFileUTF8 fn = withReadFileUTF8 fn TextIO.hGetContents

{- | Write a file in UTF8 encoding using OS-specific line-ending handling.
     `perms`, if not Nothing, will be used to create the file if it doesn't
     exist.  If it does exist, `perms` has no impact (use `chmod` to really
     force it).  If `perms is Nothing, and the file does not exist, then an
     exception shall be thrown.
 -}
writeFileUTF8 ‚à∑ forall Œµ Œ≥ Œº .
                (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                 FileAs Œ≥) ‚áí
                ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí Œº ()
writeFileUTF8 perms fn t = withWriteFileUTF8 perms fn (flip TextIO.hPutStr t)

writeNoTruncFileUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                        FileAs Œ≥) ‚áí
                        ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí Œº ()
writeNoTruncFileUTF8 perms fn t =
  withWriteNoTruncFileUTF8 perms fn (flip TextIO.hPutStr t)

writeExFileUTF8 ‚à∑ ‚àÄ Œ≥ Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº,
                             HasCallStack, FileAs Œ≥) ‚áí
                  FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí Œº ()
writeExFileUTF8 perms fn t = withWriteExFileUTF8 perms fn (flip TextIO.hPutStr t)

{- | Write a file in UTF8 encoding using OS-specific line-ending handling.
     `perms`, if not Nothing, will be used to create the file if it doesn't
     exist.  If it does exist, `perms` has no impact (use `chmod` to really
     force it).  If `perms is Nothing, and the file does not exist, then an
     exception shall be thrown.
 -}
appendFileUTF8 ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack,
                  FileAs Œ≥) ‚áí
                ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí Œº ()
appendFileUTF8 perms fn t =
  withFileUTF8 AppendMode appendFlags perms fn (flip TextIO.hPutStr t)

withFileTests ‚à∑ TestTree
withFileTests =
  let f = [absfile|/tmp/monadio-file-test.txt|]
      txt = "Swap twenty bottles for an aqua-walkman"
      t2  = "Medicine Show: "
      assertIsRight ‚à∑ Either IOError () ‚Üí Assertion
      assertIsRight = assertRight (\ _ ‚Üí () @=? ())
      read ‚à∑ FileAs Œ≥ ‚áí Œ≥ ‚Üí IO (Either IOError ùïã)
      read fn = —• $ readFileUTF8 fn
      write ‚à∑ FileAs Œ≥ ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí IO (Either IOError ())
      write perms fn t = —• $ writeFileUTF8 perms fn t
      writeNoTrunc ‚à∑ FileAs Œ≥ ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí IO (Either IOError ())
      writeNoTrunc perms fn t = —• $ writeNoTruncFileUTF8 perms fn t
      -- `append` is imported from System.Posix.IO, so don't shadow that
      appnd ‚à∑ FileAs Œ≥ ‚áí ùïÑ FileMode ‚Üí Œ≥ ‚Üí ùïã ‚Üí IO (Either IOError ())
      appnd perms fn t = —• $ appendFileUTF8 perms fn t
      testRead fn t =
        testCase "readFileUTF8" $ read fn ‚â´ assertRight (t @=?)
      testReadFail fn =
        testCase "readFileUTF8 fail" $ read fn ‚â´ assertIsLeft
      testWrite perms fn t =
        testCase "writeFileUTF8" $ write perms fn t ‚â´ assertIsRight
      testWriteNoTrunc perms fn t =
        testCase "writeNoTruncFileUTF8" $
          writeNoTrunc perms fn t ‚â´ assertIsRight
      testWriteFail perms fn t =
        testCase "writeFileUTF8 fail" $ write perms fn t ‚â´ assertIsLeft
      testAppend perms fn t =
        testCase "appendFileUTF8" $ appnd perms fn t ‚â´ assertIsRight
      testAppendFail perms fn t =
        testCase "appendFileUTF8 fail" $ appnd perms fn t ‚â´ assertIsLeft
   in testGroup "withFile"
                [ -- WRITE NEW FILE NO PERMS, CHECK FOR FAILURE
                  testWriteFail Nothing f txt
                , testWrite (Just 0o600) f txt
                , testRead f txt
                -- re-write, to check for lack of auto-truncation
                , testWriteNoTrunc (Just 0o600) f t2
                , testRead f (t2 ‚äï drop (length t2) txt)
                , testAppend (Just 0o600) f txt
                , testRead f (t2 ‚äï drop (length t2) txt ‚äï txt)
                -- DELETE
                , testCase "delete" $ —• (unlink f) ‚â´ assertIsRight
                -- TEST READ FAIL
                , testReadFail f
                -- APPEND NEW FAIL
                , testAppendFail Nothing f txt
                , testAppend (Just 0o000) f txt
                -- TEST READ FAIL
                , testReadFail f
                , testCase "chmod" $ —• (chmod 0400 f) ‚â´ assertIsRight
                -- DELETE
                , testCase "delete" $ —• (unlink f) ‚â´ assertIsRight
                ]

----------------------------------------

{- | Read a file in UTF8 encoding using OS-specific line-ending handling.
     Replace any invalid input bytes with the Unicode replacement character
     U+FFFD.
-}
-- plagiarized from https://www.snoyman.com/blog/2016/12/beware-of-readfile
readFileUTF8Lenient ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, HasCallStack, MonadIO Œº,
                       FileAs Œ≥) ‚áí
                      Œ≥ ‚Üí Œº ùïã
readFileUTF8Lenient fn = decodeUtf8With lenientDecode ‚ä≥ readFileBinary fn

--------------------------------------------------------------------------------

tests ‚à∑ TestTree
tests = testGroup "MonadIO.OpenFile" [ withFileTests ]

--------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------

