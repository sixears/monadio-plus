{-# LANGUAGE FlexibleContexts    #-}
{-# LANGUAGE InstanceSigs        #-}
{-# LANGUAGE LambdaCase          #-}
{-# LANGUAGE NoImplicitPrelude   #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE PatternSynonyms     #-}
{-# LANGUAGE QuasiQuotes         #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications    #-}
{-# LANGUAGE UnicodeSyntax       #-}
{-# LANGUAGE ViewPatterns        #-}

module MonadIO.FPath
  ( PResolvable( pResolveDir, pResolve )

  , fpInner
  -- re-exported for backwards compatibility
  , getCwd

  , tests
  )
where

import Base1T

-- base --------------------------------

import qualified  Data.List

import Data.List  ( dropWhile, dropWhileEnd, filter, intercalate, reverse, scanl
                  , scanr,zip )

-- containers --------------------------

import Data.Sequence  ( Seq( Empty ), breakr )

-- directory ---------------------------

import System.Directory  ( withCurrentDirectory )

-- exceptions --------------------------

import Control.Monad.Catch  ( MonadMask, bracket )

-- filepath ----------------------------

import System.FilePath  ( FilePath, (</>), splitPath )

-- fpath -------------------------------

import FPath.Abs               ( Abs( AbsD, AbsF ), absT )
import FPath.AbsDir            ( AbsDir, absdir, __parseAbsDirP__, root )
import FPath.AbsFile           ( AbsFile, absfileT )
import FPath.AppendableFPath   ( (‚´ª) )
import FPath.AsFilePath        ( AsFilePath( filepath ) )
import FPath.Basename          ( basename )
import FPath.Dirname           ( dirname )
import FPath.Error.FPathError  ( AsFPathError, FPathIOError, _FPathEmptyE
                               , __FPathEmptyE__, __FPathNotAFileE__ )
import FPath.Parseable         ( parse )
import FPath.RelDir            ( RelDir, reldir )
import FPath.RelFile           ( RelFile, relfile )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( (~~) )

-- safe --------------------------------

import Safe  ( headNote )

-- temporary ---------------------------

import System.IO.Temp ( getCanonicalTemporaryDirectory,withSystemTempDirectory )

-- unix --------------------------------

import System.Posix.Directory  ( changeWorkingDirectory, getWorkingDirectory )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadIO.Cwd    ( getCwd )
import MonadIO.FStat  ( FExists( FExists ), fexists )

--------------------------------------------------------------------------------

{- | Perform IO within a directory, with declared errors. -}
_inDir ‚à∑ ‚àÄ Œµ Œ± œÑ Œº .
         (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack, Printable œÑ) ‚áí
         œÑ ‚Üí IO Œ± ‚Üí Œº Œ±
_inDir (toString ‚Üí d) io =
  -- ensure that the path is attached to the error
  (—• ‚àò asIOError $ withCurrentDirectory d io) ‚â´ \ case
    Left e' ‚Üí join $ throwError (e' ~~ d)-- (ioEWithPath d e')
    Right r ‚Üí return r

{- | like `inDir`, but takes IO that already throws some error(s). -}
_inDirT ‚à∑ forall Œµ Œ± œÑ Œº .
          (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack, Printable œÑ) ‚áí
          œÑ ‚Üí ExceptT Œµ IO Œ± ‚Üí Œº Œ±
_inDirT d io = join $ _inDir d (—• io)

scan ‚à∑ (Œ± ‚Üí Œ± ‚Üí Œ±) ‚Üí Œ± ‚Üí [Œ±] ‚Üí [(Œ±,Œ±)]
scan f b xs = zip (scanl f b xs) (scanr f b xs)

{- | List of splits of a file path in two, at each directory along the path;
     e.g.,

     @
       Œª> splitPoints "foo/bar/"
       [("","foo/bar"),("foo/","bar"),("foo/bar","")]
     @

     Note that:
       -) Single @"."@ components are elided, except for a sole @"."@
          (see `normalize`).
       -) The path @""@ is considered exactly as @"."@.
       -) any trailing '/' is dropped.
       -) all sequences of slashes are compressed to a single slash.  This is
          done to avoid questions of whether "//" should be split to ("/","/")
          (clearly, it should not), and the potential return of ("///", "foo")
          leading to a 'root' directory of "///", which fexists considers not
          to exist.
       -) There are always at least two options; i.e., "before" and "after" the
          path - even for @"."@.
 -}
splitPoints ‚à∑ FilePath ‚Üí [(FilePath,FilePath)]
splitPoints f = scan (</>) "" (splitPath $ normalize f)

----------

splitPointsTests ‚à∑ TestTree
splitPointsTests =
  testGroup "splitPoints" $
    let check sp exp = testCase sp $ exp @=? splitPoints sp
     in [ check ""          [("","")]
        , check "."         [("","."),(".","")]
        , check "/"         [("","/"),("/","")]
        , check "/foo"      [("","/foo"),("/","foo"),("/foo","")]
        , check "./"        [("","./"),("./","")]
        , check "./foo"     [("","foo"),("foo","")]
        , check "bar/./foo" [("","bar/foo"), ("bar/","foo"), ("bar/foo","")]
        , check "bar/../foo" [("","bar/../foo"),("bar/","../foo"),
                              ("bar/../","foo"),("bar/../foo","")]
        , check "."         [("","."),(".","")]
        , check "///"       [("","/"),("/","")]
        , check ".///"      [("","./"),("./","")]
        , check "//./"      [("","/"),("/","")]
        , check "///."      [("","/"),("/","")]
        , check "/foo/bar/" [("","/foo/bar/"),("/","foo/bar/")
                            ,("/foo/","bar/"),("/foo/bar/","")]
        ]

--------------------

{- | Given an absdir and a subsequent filepath (which might be absolute),
     return a pair of the initial filepath that exists, which has been fully
     *resolved* (symlinks, ., .., all resolved); and a part that does not exist.
     Note that the extant part must have read-and-execute permission for the user
     for every dir along the way, and read for the final file (if any); else an
     `AsIOError` will be raised.
 -}
resolve ‚à∑ forall Œµ Œº . (AsIOError Œµ, MonadError Œµ Œº, HasCallStack, MonadIO Œº) ‚áí
          AbsDir ‚Üí FilePath ‚Üí Œº (FilePath, FilePath)
resolve d fp =
  let -- prepend `d`, note this is a no-op for input abs functions
      prepend ‚à∑ FilePath ‚Üí FilePath
      prepend = (filepath # d </>)
      fex = fmap (FExists ‚â°) ‚àò fexists ‚àò fst
      -- Given an AbsDir, `resolve` must resolve to *something* valid, since the
      -- top of an AbsDir is the root dir, and that always exists.
   in headNote ([fmt|MonadIO.FPath.resolve should never fail (%T '%T')|] d fp) ‚ä≥
        (filterM fex ‚àò reverse ‚àò splitPoints $ prepend fp)

----------------------------------------

{-| Enact a function on a FilePath excluding any leading or trailing slash; which
    are preserved.  Multiple leading or trailing slashes are compressed to a
    single instance.

    A path consisting solely of @'/'@ characters is always compressed to a
    single @'/'@.
-}
fpInner ‚à∑ (FilePath ‚Üí FilePath) ‚Üí FilePath ‚Üí FilePath
fpInner f = fpInner' (const ‚àò const f)

{-| Like `fpInner`, but the input function also gets a flag for whether
    the original input fp was absolute (had a leading @'/'@ character) and/or
    was a dir (had a trailing @'/'@ character).
-}
fpInner' ‚à∑ (ùîπ ‚Üí ùîπ ‚Üí FilePath ‚Üí FilePath) ‚Üí FilePath ‚Üí FilePath
fpInner' _ ('/':xs) | "" ‚â° filter (‚â¢'/') xs = "/"
fpInner' f fp = let is_abs = ùïµ '/' ‚â° head fp
                    is_dir = ùïµ '/' ‚â° last fp
                    pfx = if is_abs then "/" else ""
                    sfx = if is_dir then "/" else ""
                    fp' = dropWhile (‚â°'/') $ dropWhileEnd (‚â°'/') fp
                    fp'' = f is_abs is_dir fp'
                in  if "" ‚â° fp''
                    then if is_abs
                         then "/"
                         else if is_dir then "./" else "."
                    else pfx ‚äï f is_abs is_dir fp'' ‚äï sfx

{-| Like `fpInner'`, but the manipulation function is called with the input
    path already split into components; each with neither leading nor trailing
    slash.
-}
fpInner'Comp  ‚à∑ (ùîπ ‚Üí ùîπ ‚Üí [FilePath] ‚Üí [FilePath]) ‚Üí FilePath ‚Üí FilePath
fpInner'Comp f =
  -- simply dropping all the slashes from the end is fine, since this is called
  -- with the leading and trailing '/' from the full path already handled by
  -- `fpInner'`
  let split = dropWhileEnd (‚â°'/') ‚©∫ splitPath
      f' is_abs is_dir fp = intercalate "/" ‚àò f is_abs is_dir $ split fp
  in  fpInner' f'

----------------------------------------

normalizeInner ‚à∑ [FilePath] ‚Üí [FilePath]
normalizeInner fps = filter (‚â¢ ".") fps

{-| Compress repeated @'/'@ characters to singles; remove "." paths except for
    @"."@ and @"./"@ themselves.
-}
normalize ‚à∑ FilePath ‚Üí FilePath
normalize "" = ""
normalize fp = fpInner'Comp (\ _ _ ‚Üí normalizeInner) fp

--------------------

normalizeTests ‚à∑ TestTree
normalizeTests =
  testGroup "normalize" $
    let check p exp = testCase p $ exp @=? normalize p
     in [ check ""      ""
        , check "/"     "/"
        , check "/."     "/"
        , check "/./"   "/"
        , check "/././" "/"
        , check "//"    "/"
        , check "///"   "/"
        , check "///."  "/"
        , check "//./"  "/"
        , check "/.//"  "/"
        , check "."     "."
        , check "./."   "."
        , check "./"    "./"
        , check ".//"   "./"
        , check ".///"  "./"

        , check "/././etc" "/etc"
        , check "/././etc/" "/etc/"

        , check "/etc" "/etc"
        , check "/etc/" "/etc/"

        , check "etc" "etc"
        , check "etc/" "etc/"
        ]

----------------------------------------

canonicalizeInner ‚à∑ ùîπ ‚Üí [FilePath] ‚Üí [FilePath]
canonicalizeInner is_abs fps =
  go ([],fps)
  where -- Maintain two stacks: a no-further-inspection stack (LHS), and a
        -- stack-under-examination; when we remove an x/.. stanza, we re-add
        -- a component from the no-further-inspection stack, to allow it to
        -- be "cancelled out" by a later ".." if appropriate.
        go (ys,[]) = reverse ys
        go ([],"..":xs) | is_abs = go([],xs) -- @".."@ in the root directory
                                             -- is always a reference to the
                                   -- root directory (try it!)

        go (ys,"..":xs) = go("..":ys,xs) -- (1) see below

        -- It is important that having removed an x/.., we add back the dir
        -- "above" x to the stack-under-examination; so that, e.g., y/x/../..
        -- gets reduced to y/.. which can be reduced.  Without this, the y
        -- would remain on the no-further-inspection stack, and the ".." would
        -- be pushed on there too, missing the opportunity for reduction.

        go ([],_:"..":xs) = go ([],xs)
        go (ys@("..":_),_:"..":xs) = go(ys,xs) -- no point pushing a ".." back
                                               -- onto the
                                               -- stack-under-examination, as by
                                               -- pattern (1), it will just get
                                               -- popped back again.

        go (y:ys,_:"..":xs) = go(ys,y:xs)
        go (ys,x:xs) = go (x:ys,xs)

{-| Compress multiple @/@ to a single @/@; remove @.@; remove @x/..@ sequences.
    Note that logically, @""@ canonicalizes to @"."@, for consistency with (say)
    @"foo/.."@.

    This is not the same as `resolve`, which checks the filesystem.  It is
    somewhat similar to @realpath --logical@.  For example, if @/tmp/foo/pam@
    points to @/etc/pam@ (which is a real directory); then @realpath@ of
    @/tmp/foo/pam/..@ will be @/etc@; but @realpath --logical@ of
    @/tmp/foo/pam/..@ will be @/tmp/foo@.  `canonicalize` should give the same
    result.

    Note that this doesn't guarantee that all the ".." components will be gone;
    e.g., ".." at the beginning of a relative path cannot be removed.
-}
canonicalize ‚à∑ FilePath ‚Üí FilePath
canonicalize =
  fpInner'Comp (\ is_abs _ ‚Üí canonicalizeInner is_abs ‚àò normalizeInner)

canonicalizeTests ‚à∑ TestTree
canonicalizeTests =
  testGroup "canonicalize" $
    let check p exp = testCase p $ exp @=? canonicalize p
     in [ check ""      "." -- "" is what you'd get for, say, foo/..; hence .
        , check "/"     "/"
        , check "//"    "/"
        , check "///"   "/"
        , check "///."  "/"
        , check "//./"  "/"
        , check "/.//"  "/"
        , check "./"    "./"
        , check ".//"   "./"
        , check ".///"  "./"

        , check "/etc" "/etc"
        , check "/etc/" "/etc/"
        , check "/etc/.." "/"
        , check "/etc/../" "/"
        , check "/etc/../var" "/var"
        , check "/etc/../var/" "/var/"
        , check "/etc/pam/../../var" "/var"
        , check "/etc/pam/../../var/" "/var/"
        , check "/etc/../var/log/.." "/var"
        -- /.. is / (try it!)
        , check "/../etc/../var/log/.." "/var"
        , check "../etc/../var/log" "../var/log"
        , check "../etc/../var/log/" "../var/log/"
        , check "../etc/../var/log/.." "../var"
        , check "../etc/../var/log/../" "../var/"

        , check "etc" "etc"
        , check "etc/" "etc/"
        , check "etc/.." "."
        , check "etc/../" "./"
        , check "etc/../var" "var"
        , check "etc/../var/" "var/"
        , check "etc/pam/../../var" "var"
        , check "etc/pam/../../var/" "var/"
        , check "etc/../var/log/.." "var"

        , check "."     "."
        , check ".."    ".."
        , check "../a"  "../a"
        , check "../a/" "../a/"
        , check "a/.."  "."
        , check "a/../" "./"
        , check "/a//b///c/.//.."  "/a/b"
        , check "/a//b///c/.//../" "/a/b/"
        ]

------------------------------------------------------------

{- | Things which are physically resolvable -}
class PResolvable Œ± where
  {- | Given a path, which might well be relative and include '..' and/or '.',
       physically resolve that to an Œ± by starting at a given `AbsDir`.
       This involves trying to @chdir@ to the target directory; so will only
       work for directories that you have permission to @chdir@ into (for files,
       you need to be able to @chdir@ into the parent directory).
   -}
  pResolveDir ‚à∑ ‚àÄ Œµ œÑ Œº .
                (Printable œÑ, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
                 HasCallStack, MonadIO Œº) ‚áí
                AbsDir ‚Üí œÑ ‚Üí Œº Œ±

  {- | `pResolveDir`, taking the current working directory as the starting point
   -}
  pResolve ‚à∑ ‚àÄ Œµ œÑ Œº .
             (Printable œÑ, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
              HasCallStack, MonadIO Œº) ‚áí
             œÑ ‚Üí Œº Œ±
  pResolve f = getCwd ‚â´ \ d ‚Üí pResolveDir d f

{- | Physically resolve the whole path, thus every directory (including the last
     must) exist.  Treats the lack of a trailing '/' on the input stringlike
     kindly; that is, even without a trailing '/', it is considered as a
     directory.
 -}
instance PResolvable AbsDir where
  pResolveDir ‚à∑ ‚àÄ Œµ œÑ Œº .
                (Printable œÑ, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
                 HasCallStack, MonadIO Œº) ‚áí
                AbsDir ‚Üí œÑ ‚Üí Œº AbsDir
  pResolveDir d (toString ‚Üí p) = do
    (extant,non_extant) ‚Üê resolve d p
    d' ‚Üê _inDirT extant getCwd
    let -- add a trailing / so reldir parses it
        toDir ‚à∑ FilePath ‚Üí FilePath
        toDir "" = "./"
        toDir t  = case Data.List.last t of -- last is safe, t is non-empty
                     '/' ‚Üí t
                     _   ‚Üí t ‚äï "/"
    p' ‚Üê parse @RelDir (toDir non_extant)
    return $ d' ‚´ª p'

----------

pResolveAbsDirTests ‚à∑ TestTree
pResolveAbsDirTests =
  let tName   = "pResolveTests.AbsDir"
      inTmp   = inSystemTempDirectory tName

      pResolve_ ‚à∑ ùïã ‚Üí IO (Either FPathIOError AbsDir)
      pResolve_ = —• ‚àò pResolve

      getTmpdir ‚à∑ IO AbsDir
      getTmpdir = __parseAbsDirP__ ‚ä≥ getCanonicalTemporaryDirectory

   in testGroup "AbsDir"
        [ testCase "inTmp ./" $ inTmp $ \ d ‚Üí pResolve_ "./" ‚â´ (Right d @=?)
        , testCase "inTmp . (forgiveness of pResolve wrt trailing /)" $
            inTmp $ \ d ‚Üí pResolve_ "."  ‚â´ (Right d @=?)
        , testCase "inTmp .." $
            inTmp ‚àò const $
                    getTmpdir ‚â´ \ tmpdir ‚Üí pResolve_ ".."  ‚â´ (Right tmpdir @=?)

        , testCase "inTmp cwd" $
            -- value is an abs dir, e.g., /tmp/<user>/d7b66efeebbcf249/
            inTmp $ \ d ‚Üí pResolve_ (toText d) ‚â´ (Right d @=?)
        , testCase "root" $
            inTmp $ \ _ ‚Üí pResolve_ "/" ‚â´ (Right [absdir|/|] @=?)
        , testCase "/nonsuch/" $
            inTmp $ \ _ ‚Üí pResolve_ "/nonsuch/" ‚â´
                            (Right [absdir|/nonsuch/|] @=?)
        , testCase "inTmp nonsuch" $
            inTmp $ \ d ‚Üí pResolve_ "nonsuch" ‚â´
                          (Right (d ‚´ª [reldir|nonsuch/|]) @=?)
        , testCase "inTmp nonesuch" $
            inTmp $ \ _ ‚Üí pResolve_ "/nonsuch" ‚â´
                          (Right [absdir|/nonsuch/|] @=?)
        , testCase "inTmp nonsuch/" $
            inTmp $ \ d ‚Üí pResolve_ "nonsuch/" ‚â´
                          (Right (d ‚´ª [reldir|nonsuch/|]) @=?)

        , testCase "inTmp ./" $ inTmp $ \ d ‚Üí do
            d' <- pResolve_ "nonsuch/nonsuch"
            Right (d ‚´ª [reldir|nonsuch/nonsuch/|]) @=? d'

        , testCase "inTmp ../ (dirname)" $
            inTmp $ \ d ‚Üí pResolve_ "../" ‚â´ ((Right (d ‚ä£ dirname) @=?))
        , testCase "inTmp ../ (basename)" $
            inTmp $ \ d ‚Üí pResolve_ "../" ‚â´
                            ((Right d @=?) ‚àò fmap (‚´ª basename d))
        ]

----------

pResolveDirAbsDirTests ‚à∑ TestTree
pResolveDirAbsDirTests =
  let tName   = "pResolveDirTests.AbsDir"
      withTmp ‚à∑ (MonadIO Œº, MonadMask Œº) ‚áí (AbsDir ‚Üí Œº Œ±) ‚Üí Œº Œ±
      withTmp = withSystemTempDirectory tName ‚àò (‚àò __parseAbsDirP__)

      pResolveDir_ ‚à∑ AbsDir ‚Üí ùïã ‚Üí IO (Either FPathIOError AbsDir)
      pResolveDir_ d = —• ‚àò pResolveDir d

      getTmpdir ‚à∑ IO AbsDir
      getTmpdir = __parseAbsDirP__ ‚ä≥ getCanonicalTemporaryDirectory

   in testGroup "AbsDir"
        [ testCase "withTmp ./" $
            withTmp $ \ d ‚Üí pResolveDir_ d "./" ‚â´ (Right d @=?)
        , testCase "withTmp .//" $
            withTmp $ \ d ‚Üí pResolveDir_ d ".//" ‚â´ (Right d @=?)
        , testCase "withTmp /" $
            withTmp $ \ d ‚Üí pResolveDir_ d "/" ‚â´ (Right root @=?)
        , testCase "withTmp //" $
            withTmp $ \ d ‚Üí pResolveDir_ d "//" ‚â´ (Right root @=?)
        , testCase "withTmp ." $
            withTmp $ \ d ‚Üí pResolveDir_ d "." ‚â´ (Right d @=?)
        , testCase "withTmp .." $
            withTmp $ \ d ‚Üí getTmpdir ‚â´ \ tmpdir ‚Üí
                      pResolveDir_ d ".." ‚â´ (Right tmpdir @=?)
        ]

----------------------------------------

{- | Physically resolve every directory up to and including the dirname of the
     input stringlike; and then tacks the file basename onto the end.  Treats a
     trailing '/' as a dir, and thus fails.
 -}
instance PResolvable AbsFile where
  pResolveDir ‚à∑ ‚àÄ Œµ œÑ Œº .
                (Printable œÑ, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
                 HasCallStack, MonadIO Œº) ‚áí
                AbsDir ‚Üí œÑ ‚Üí Œº AbsFile
  pResolveDir d (toString ‚Üí f) =
    -- we can't simply use parseRelFile, etc., here, as we want to accept
    -- paths with '..' and '.' in them (and resolve them)
    case breakr (‚â° '/') $ fromList f of
      -- first element of tuple is suffix of seq (a little counterintuitively)
      (Empty, Empty) ‚Üí -- f was empty
                       __FPathEmptyE__    absfileT
      (Empty, _    ) ‚Üí -- f had a trailing /
                       __FPathNotAFileE__ absfileT (toText f)

      (_, Empty    ) ‚Üí -- just a file, no dir part
                       do c ‚Üê pResolveDir @AbsDir d (""‚à∑ùïã)
                          (c ‚´ª) ‚ä≥ parse @RelFile f

      (x    , y    ) ‚Üí -- dir + file
                       do c ‚Üê pResolveDir @AbsDir d (toList y)
                          (c ‚´ª) ‚ä≥ parse @RelFile (toList x)

pResolveAbsFileTests ‚à∑ TestTree
pResolveAbsFileTests =
  let tName   = "MonadIO.FPath.pResolveTests.AbsFile"
      inTmp   = inSystemTempDirectory tName
      withTmp ‚à∑ (MonadIO Œº, MonadMask Œº) ‚áí (AbsDir ‚Üí Œº Œ±) ‚Üí Œº Œ±
      withTmp = withSystemTempDirectory tName ‚àò (‚àò __parseAbsDirP__)

      pResolve_ ‚à∑ ùïã ‚Üí IO (Either FPathIOError AbsFile)
      pResolve_ = —• ‚àò pResolve

      pResolveDir_ ‚à∑ AbsDir ‚Üí ùïã ‚Üí IO (Either FPathIOError AbsFile)
      pResolveDir_ d = —• ‚àò pResolveDir d

   in testGroup "AbsFile"
        [ testCase "inTmp '' x" $
            inTmp $ \ d ‚Üí pResolve_ "x" ‚â´
                            (Right (d ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "withTmp '' x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "x" ‚â´
                          (Right (d ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "inTmp ./ x" $
            inTmp $ \ d ‚Üí pResolve_ "./x" ‚â´
                          (Right (d ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "withTmp ./ x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "./x" ‚â´
                          (Right (d ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "inTmp ../ x" $
            inTmp $ \ d ‚Üí pResolve_ "../x" ‚â´
                          (Right (d ‚ä£ dirname ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "withTmp ../ x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "../x" ‚â´
                          (Right (d ‚ä£ dirname ‚´ª [relfile|x|] ‚à∑ AbsFile) @=?)
        , testCase "non-extant dir" $
            withTmp $ \ d ‚Üí pResolveDir_ (d ‚´ª [reldir|nonesuch/|]) "x" ‚â´
                          (Right (d ‚´ª [relfile|nonesuch/x|] ‚à∑ AbsFile) @=?)
        ]


{- | Given a path, which might well relative include '..' and/or '.', physically
     resolve that to an Abs.  Relative paths are contextual to the cwd.
     Input with a trailing '/', "/.", or "/.."; or the special cases "." and
     ".." are resolved to directories; without are resolved to files.  Empty
     input strings cause a failure.
 -}
instance PResolvable Abs where
  pResolveDir ‚à∑ forall Œµ œÑ Œº .
                (Printable œÑ, AsIOError Œµ, AsFPathError Œµ, MonadError Œµ Œº,
                 HasCallStack, MonadIO Œº)‚áí
                AbsDir ‚Üí œÑ ‚Üí Œº Abs
  pResolveDir _ (toString ‚Üí [])                       = __FPathEmptyE__ absT
  pResolveDir d t@(toString ‚Üí ".")                    = AbsD ‚ä≥ pResolveDir d t
  pResolveDir d t@(toString ‚Üí "..")                   = AbsD ‚ä≥ pResolveDir d t
  pResolveDir d t@(reverse ‚àò toString ‚Üí '/' : _)      = AbsD ‚ä≥ pResolveDir d t
  pResolveDir d t@(reverse ‚àò toString ‚Üí '.' : '/' : _)= AbsD ‚ä≥ pResolveDir d t
  pResolveDir d t@(reverse ‚àò toString ‚Üí '.':'.':'/':_)= AbsD ‚ä≥ pResolveDir d t
  pResolveDir d t                                     = AbsF ‚ä≥ pResolveDir d t

pResolveAbsTests ‚à∑ TestTree
pResolveAbsTests =
  let tName   = "MonadIO.FPath.pResolveTests.Abs"
      withTmp ‚à∑ (MonadIO Œº, MonadMask Œº) ‚áí (AbsDir ‚Üí Œº Œ±) ‚Üí Œº Œ±
      withTmp = withSystemTempDirectory tName ‚àò (‚àò __parseAbsDirP__)

      pResolveDir_ ‚à∑ AbsDir ‚Üí ùïã ‚Üí IO (Either FPathIOError Abs)
      pResolveDir_ d = —• ‚àò pResolveDir d

   in testGroup "Abs"
        [ testCase "withTmp ''" $
            withTmp $ \ d ‚Üí pResolveDir_ d "" ‚â´ (Left (_FPathEmptyE absT) @=?)
        , testCase "withTmp ./" $
            withTmp $ \ d ‚Üí pResolveDir_ d "./" ‚â´ (Right (AbsD d) @=?)
        , testCase "withTmp ." $
            withTmp $ \ d ‚Üí pResolveDir_ d "." ‚â´ (Right (AbsD d) @=?)
        , testCase "withTmp .." $
            withTmp $ \ d ‚Üí pResolveDir_ d ".." ‚â´
                              (Right (AbsD (d ‚ä£ dirname)) @=?)
        , testCase "withTmp ../" $
            withTmp $ \ d ‚Üí pResolveDir_ d "../" ‚â´
                              (Right (AbsD (d ‚ä£ dirname)) @=?)
        , testCase "withTmp ../." $
            withTmp $ \ d ‚Üí pResolveDir_ d "../." ‚â´
                              (Right (AbsD (d ‚ä£ dirname)) @=?)
        , testCase "withTmp ./../." $
            withTmp $ \ d ‚Üí
                      pResolveDir_ d "./../."‚â´(Right (AbsD (d ‚ä£ dirname)) @=?)
        , testCase "withTmp .././." $
            withTmp $ \ d ‚Üí
                      pResolveDir_ d ".././."‚â´(Right (AbsD (d ‚ä£ dirname)) @=?)

        , testCase "withTmp ''" $
            withTmp $ \ d ‚Üí pResolveDir_ d "" ‚â´ (Left (_FPathEmptyE absT) @=?)
        , testCase "withTmp '' x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "x" ‚â´
                          (Right (AbsF (d ‚´ª [relfile|x|])) @=?)
        , testCase "withTmp ./ x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "./x" ‚â´
                          (Right (AbsF (d ‚´ª [relfile|x|])) @=?)
        , testCase "withTmp ../ x" $
            withTmp $ \ d ‚Üí pResolveDir_ d "../x" ‚â´
                          (Right (AbsF (d ‚ä£ dirname ‚´ª [relfile|x|])) @=?)
        ]

--------------------------------------------------------------------------------
--                                   tests                                    --
--------------------------------------------------------------------------------

inSystemTempDirectory ‚à∑ String ‚Üí (AbsDir ‚Üí IO Œ±) ‚Üí IO Œ±
inSystemTempDirectory t io =
  withSystemTempDirectory t $ \ d ‚Üí
    bracket (getWorkingDirectory ‚â´  \ o ‚Üí changeWorkingDirectory d ‚™º return o)
            changeWorkingDirectory
            (\ _ ‚Üí io $ __parseAbsDirP__ d)

pResolveDirTests ‚à∑ TestTree
pResolveDirTests = testGroup "pResolveDir" [ pResolveDirAbsDirTests ]

pResolveTests ‚à∑ TestTree
pResolveTests = testGroup "pResolve" [ pResolveAbsDirTests
                                     , pResolveAbsFileTests, pResolveAbsTests ]

tests ‚à∑ TestTree
tests = testGroup "MonadIO.FPath" [ splitPointsTests, canonicalizeTests
                                  , normalizeTests
                                  , pResolveTests, pResolveDirTests
                                  ]

----------------------------------------

_test ‚à∑ IO ExitCode
_test = runTestTree tests

--------------------

_tests ‚à∑ String ‚Üí IO ExitCode
_tests = runTestsP tests

_testr ‚à∑ String ‚Üí ‚Ñï ‚Üí IO ExitCode
_testr = runTestsReplay tests

-- that's all, folks! ----------------------------------------------------------
